// @generated by protobuf-ts 2.8.3
// @generated from protobuf file "hero/v1alpha/hero.proto" (package "hero.v1alpha", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message hero.v1alpha.HelloRequest
 */
export interface HelloRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message hero.v1alpha.HelloReply
 */
export interface HelloReply {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message hero.v1alpha.Hero
 */
export interface Hero {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 power = 3;
     */
    power: number;
    /**
     * @generated from protobuf field: int32 hp = 4;
     */
    hp: number;
}
/**
 * @generated from protobuf message hero.v1alpha.CreateHeroRequest
 */
export interface CreateHeroRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 power = 2;
     */
    power: number;
}
/**
 * @generated from protobuf message hero.v1alpha.CreateHeroResponse
 */
export interface CreateHeroResponse {
    /**
     * @generated from protobuf field: hero.v1alpha.Hero hero = 1;
     */
    hero?: Hero;
}
/**
 * @generated from protobuf message hero.v1alpha.FetchHeroRequest
 */
export interface FetchHeroRequest {
    /**
     * @generated from protobuf field: int32 id = 1;
     */
    id: number;
}
/**
 * @generated from protobuf message hero.v1alpha.FetchHeroResponse
 */
export interface FetchHeroResponse {
    /**
     * @generated from protobuf field: repeated hero.v1alpha.Hero heroes = 1;
     */
    heroes: Hero[];
}
/**
 * @generated from protobuf message hero.v1alpha.AttackHeroRequest
 */
export interface AttackHeroRequest {
    /**
     * @generated from protobuf field: int32 attacking_id = 1;
     */
    attackingId: number;
    /**
     * @generated from protobuf field: int32 defending_id = 2;
     */
    defendingId: number;
}
/**
 * @generated from protobuf message hero.v1alpha.AttackHeroResponse
 */
export interface AttackHeroResponse {
    /**
     * @generated from protobuf field: hero.v1alpha.Hero attacking_hero = 1;
     */
    attackingHero?: Hero;
    /**
     * @generated from protobuf field: hero.v1alpha.Hero defending_hero = 2;
     */
    defendingHero?: Hero;
}
// @generated message type with reflection information, may provide speed optimized methods
class HelloRequest$Type extends MessageType<HelloRequest> {
    constructor() {
        super("hero.v1alpha.HelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloRequest>): HelloRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloRequest): HelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.HelloRequest
 */
export const HelloRequest = new HelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HelloReply$Type extends MessageType<HelloReply> {
    constructor() {
        super("hero.v1alpha.HelloReply", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HelloReply>): HelloReply {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HelloReply>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HelloReply): HelloReply {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HelloReply, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.HelloReply
 */
export const HelloReply = new HelloReply$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Hero$Type extends MessageType<Hero> {
    constructor() {
        super("hero.v1alpha.Hero", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "power", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hp", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Hero>): Hero {
        const message = { id: 0, name: "", power: 0, hp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Hero>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hero): Hero {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* int32 power */ 3:
                    message.power = reader.int32();
                    break;
                case /* int32 hp */ 4:
                    message.hp = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hero, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* int32 power = 3; */
        if (message.power !== 0)
            writer.tag(3, WireType.Varint).int32(message.power);
        /* int32 hp = 4; */
        if (message.hp !== 0)
            writer.tag(4, WireType.Varint).int32(message.hp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.Hero
 */
export const Hero = new Hero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHeroRequest$Type extends MessageType<CreateHeroRequest> {
    constructor() {
        super("hero.v1alpha.CreateHeroRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "power", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateHeroRequest>): CreateHeroRequest {
        const message = { name: "", power: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHeroRequest): CreateHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 power */ 2:
                    message.power = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 power = 2; */
        if (message.power !== 0)
            writer.tag(2, WireType.Varint).int32(message.power);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.CreateHeroRequest
 */
export const CreateHeroRequest = new CreateHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHeroResponse$Type extends MessageType<CreateHeroResponse> {
    constructor() {
        super("hero.v1alpha.CreateHeroResponse", [
            { no: 1, name: "hero", kind: "message", T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<CreateHeroResponse>): CreateHeroResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHeroResponse): CreateHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hero.v1alpha.Hero hero */ 1:
                    message.hero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hero.v1alpha.Hero hero = 1; */
        if (message.hero)
            Hero.internalBinaryWrite(message.hero, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.CreateHeroResponse
 */
export const CreateHeroResponse = new CreateHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchHeroRequest$Type extends MessageType<FetchHeroRequest> {
    constructor() {
        super("hero.v1alpha.FetchHeroRequest", [
            { no: 1, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<FetchHeroRequest>): FetchHeroRequest {
        const message = { id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FetchHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchHeroRequest): FetchHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 id */ 1:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.FetchHeroRequest
 */
export const FetchHeroRequest = new FetchHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FetchHeroResponse$Type extends MessageType<FetchHeroResponse> {
    constructor() {
        super("hero.v1alpha.FetchHeroResponse", [
            { no: 1, name: "heroes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<FetchHeroResponse>): FetchHeroResponse {
        const message = { heroes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FetchHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FetchHeroResponse): FetchHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hero.v1alpha.Hero heroes */ 1:
                    message.heroes.push(Hero.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FetchHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hero.v1alpha.Hero heroes = 1; */
        for (let i = 0; i < message.heroes.length; i++)
            Hero.internalBinaryWrite(message.heroes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.FetchHeroResponse
 */
export const FetchHeroResponse = new FetchHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackHeroRequest$Type extends MessageType<AttackHeroRequest> {
    constructor() {
        super("hero.v1alpha.AttackHeroRequest", [
            { no: 1, name: "attacking_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "defending_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AttackHeroRequest>): AttackHeroRequest {
        const message = { attackingId: 0, defendingId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttackHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackHeroRequest): AttackHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 attacking_id */ 1:
                    message.attackingId = reader.int32();
                    break;
                case /* int32 defending_id */ 2:
                    message.defendingId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 attacking_id = 1; */
        if (message.attackingId !== 0)
            writer.tag(1, WireType.Varint).int32(message.attackingId);
        /* int32 defending_id = 2; */
        if (message.defendingId !== 0)
            writer.tag(2, WireType.Varint).int32(message.defendingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.AttackHeroRequest
 */
export const AttackHeroRequest = new AttackHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AttackHeroResponse$Type extends MessageType<AttackHeroResponse> {
    constructor() {
        super("hero.v1alpha.AttackHeroResponse", [
            { no: 1, name: "attacking_hero", kind: "message", T: () => Hero },
            { no: 2, name: "defending_hero", kind: "message", T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<AttackHeroResponse>): AttackHeroResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AttackHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AttackHeroResponse): AttackHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hero.v1alpha.Hero attacking_hero */ 1:
                    message.attackingHero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.attackingHero);
                    break;
                case /* hero.v1alpha.Hero defending_hero */ 2:
                    message.defendingHero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.defendingHero);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AttackHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hero.v1alpha.Hero attacking_hero = 1; */
        if (message.attackingHero)
            Hero.internalBinaryWrite(message.attackingHero, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* hero.v1alpha.Hero defending_hero = 2; */
        if (message.defendingHero)
            Hero.internalBinaryWrite(message.defendingHero, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.v1alpha.AttackHeroResponse
 */
export const AttackHeroResponse = new AttackHeroResponse$Type();
/**
 * @generated ServiceType for protobuf service hero.v1alpha.HeroService
 */
export const HeroService = new ServiceType("hero.v1alpha.HeroService", [
    { name: "Hello", options: {}, I: HelloRequest, O: HelloReply },
    { name: "CreateHero", options: {}, I: CreateHeroRequest, O: CreateHeroResponse },
    { name: "FetchHero", options: {}, I: FetchHeroRequest, O: FetchHeroResponse },
    { name: "AttackHero", options: {}, I: AttackHeroRequest, O: AttackHeroResponse }
]);
