"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visit = void 0;
const visit = (file, visitor) => {
    const processField = (prefix, file, field) => {
        const fqn = `${prefix}.${field.getName()}`;
        if (visitor.field) {
            visitor.field(fqn, file, field);
        }
    };
    const processExtension = (prefix, file, ext) => {
        const fqn = `${prefix}.${ext.getName()}`;
        if (visitor.extension) {
            visitor.extension(fqn, file, ext);
        }
    };
    const processOneOf = (prefix, file, decl) => {
        const fqn = `${prefix}.${decl.getName()}`;
        if (visitor.oneOf) {
            visitor.oneOf(fqn, file, decl);
        }
    };
    const processEnum = (prefix, file, decl) => {
        const fqn = `${prefix}.${decl.getName()}`;
        if (visitor.enum) {
            visitor.enum(fqn, file, decl);
        }
        decl.getValueList().forEach((value) => {
            const valueFqn = `${fqn}.${value.getName()}`;
            if (visitor.enumValue) {
                visitor.enumValue(valueFqn, file, value);
            }
        });
    };
    const processMessage = (prefix, file, msg) => {
        const fqn = `${prefix}.${msg.getName()}`;
        if (visitor.message) {
            visitor.message(fqn, file, msg);
        }
        msg.getNestedTypeList().forEach((type) => processMessage(fqn, file, type));
        msg.getEnumTypeList().forEach((type) => processEnum(fqn, file, type));
        msg.getFieldList().forEach((field) => processField(fqn, file, field));
        msg.getOneofDeclList().forEach((decl) => processOneOf(fqn, file, decl));
        msg.getExtensionList().forEach((ext) => processExtension(fqn, file, ext));
    };
    const processService = (prefix, file, service) => {
        const fqn = `${prefix}.${service.getName()}`;
        if (visitor.service) {
            visitor.service(fqn, file, service);
        }
        service.getMethodList().forEach((method) => {
            const methodFqn = `${fqn}.${method.getName()}`;
            if (visitor.method) {
                visitor.method(methodFqn, file, method);
            }
        });
    };
    const packageName = file.getPackage();
    file
        .getEnumTypeList()
        .forEach((type) => processEnum(packageName, file, type));
    file
        .getMessageTypeList()
        .forEach((type) => processMessage(packageName, file, type));
    file
        .getServiceList()
        .forEach((service) => processService(packageName, file, service));
    file
        .getExtensionList()
        .forEach((ext) => processExtension(packageName, file, ext));
};
exports.visit = visit;
//# sourceMappingURL=protobuf-visitor.js.map