// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hero/v1alpha/hero.proto" (package "hero", syntax proto3)
// tslint:disable
import { HeroService } from "./hero";
import type { DeleteHeroResponse } from "./hero";
import type { DeleteHeroRequest } from "./hero";
import type { UpdateHeroResponse } from "./hero";
import type { UpdateHeroRequest } from "./hero";
import type { CreateHeroResponse } from "./hero";
import type { CreateHeroRequest } from "./hero";
import type { GetHeroResponse } from "./hero";
import type { GetHeroRequest } from "./hero";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HelloService } from "./hero";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SayHelloResponse } from "./hero";
import type { SayHelloRequest } from "./hero";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hero.HelloService
 */
export interface IHelloServiceClient {
    /**
     * @generated from protobuf rpc: SayHello(hero.SayHelloRequest) returns (hero.SayHelloResponse);
     */
    sayHello(input: SayHelloRequest, options?: RpcOptions): UnaryCall<SayHelloRequest, SayHelloResponse>;
}
/**
 * @generated from protobuf service hero.HelloService
 */
export class HelloServiceClient implements IHelloServiceClient, ServiceInfo {
    typeName = HelloService.typeName;
    methods = HelloService.methods;
    options = HelloService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: SayHello(hero.SayHelloRequest) returns (hero.SayHelloResponse);
     */
    sayHello(input: SayHelloRequest, options?: RpcOptions): UnaryCall<SayHelloRequest, SayHelloResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SayHelloRequest, SayHelloResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service hero.HeroService
 */
export interface IHeroServiceClient {
    /**
     * @generated from protobuf rpc: GetHero(hero.GetHeroRequest) returns (hero.GetHeroResponse);
     */
    getHero(input: GetHeroRequest, options?: RpcOptions): UnaryCall<GetHeroRequest, GetHeroResponse>;
    /**
     * @generated from protobuf rpc: CreateHero(hero.CreateHeroRequest) returns (hero.CreateHeroResponse);
     */
    createHero(input: CreateHeroRequest, options?: RpcOptions): UnaryCall<CreateHeroRequest, CreateHeroResponse>;
    /**
     * @generated from protobuf rpc: UpdateHero(hero.UpdateHeroRequest) returns (hero.UpdateHeroResponse);
     */
    updateHero(input: UpdateHeroRequest, options?: RpcOptions): UnaryCall<UpdateHeroRequest, UpdateHeroResponse>;
    /**
     * @generated from protobuf rpc: DeleteHero(hero.DeleteHeroRequest) returns (hero.DeleteHeroResponse);
     */
    deleteHero(input: DeleteHeroRequest, options?: RpcOptions): UnaryCall<DeleteHeroRequest, DeleteHeroResponse>;
}
/**
 * @generated from protobuf service hero.HeroService
 */
export class HeroServiceClient implements IHeroServiceClient, ServiceInfo {
    typeName = HeroService.typeName;
    methods = HeroService.methods;
    options = HeroService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetHero(hero.GetHeroRequest) returns (hero.GetHeroResponse);
     */
    getHero(input: GetHeroRequest, options?: RpcOptions): UnaryCall<GetHeroRequest, GetHeroResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetHeroRequest, GetHeroResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateHero(hero.CreateHeroRequest) returns (hero.CreateHeroResponse);
     */
    createHero(input: CreateHeroRequest, options?: RpcOptions): UnaryCall<CreateHeroRequest, CreateHeroResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateHeroRequest, CreateHeroResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateHero(hero.UpdateHeroRequest) returns (hero.UpdateHeroResponse);
     */
    updateHero(input: UpdateHeroRequest, options?: RpcOptions): UnaryCall<UpdateHeroRequest, UpdateHeroResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateHeroRequest, UpdateHeroResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: DeleteHero(hero.DeleteHeroRequest) returns (hero.DeleteHeroResponse);
     */
    deleteHero(input: DeleteHeroRequest, options?: RpcOptions): UnaryCall<DeleteHeroRequest, DeleteHeroResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteHeroRequest, DeleteHeroResponse>("unary", this._transport, method, opt, input);
    }
}
