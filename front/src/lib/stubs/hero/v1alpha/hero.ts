// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hero/v1alpha/hero.proto" (package "hero", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message hero.SayHelloRequest
 */
export interface SayHelloRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
}
/**
 * @generated from protobuf message hero.SayHelloResponse
 */
export interface SayHelloResponse {
    /**
     * @generated from protobuf field: string message = 1;
     */
    message: string;
}
/**
 * @generated from protobuf message hero.Hero
 */
export interface Hero {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 hp = 2;
     */
    hp: number;
    /**
     * @generated from protobuf field: int32 power = 3;
     */
    power: number;
    /**
     * @generated from protobuf field: int32 id = 4;
     */
    id: number;
}
/**
 * @generated from protobuf message hero.GetHeroRequest
 */
export interface GetHeroRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message hero.GetHeroResponse
 */
export interface GetHeroResponse {
    /**
     * @generated from protobuf field: repeated hero.Hero hero = 1;
     */
    hero: Hero[];
}
/**
 * @generated from protobuf message hero.CreateHeroRequest
 */
export interface CreateHeroRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 power = 2;
     */
    power: number;
}
/**
 * @generated from protobuf message hero.CreateHeroResponse
 */
export interface CreateHeroResponse {
    /**
     * @generated from protobuf field: hero.Hero hero = 1;
     */
    hero?: Hero;
}
/**
 * @generated from protobuf message hero.UpdateHeroRequest
 */
export interface UpdateHeroRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 hp = 2;
     */
    hp: number;
    /**
     * @generated from protobuf field: int32 power = 3;
     */
    power: number;
    /**
     * @generated from protobuf field: int32 id = 4;
     */
    id: number;
}
/**
 * @generated from protobuf message hero.UpdateHeroResponse
 */
export interface UpdateHeroResponse {
    /**
     * @generated from protobuf field: hero.Hero hero = 1;
     */
    hero?: Hero;
}
/**
 * @generated from protobuf message hero.DeleteHeroRequest
 */
export interface DeleteHeroRequest {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: int32 id = 2;
     */
    id: number;
}
/**
 * @generated from protobuf message hero.DeleteHeroResponse
 */
export interface DeleteHeroResponse {
    /**
     * @generated from protobuf field: hero.Hero hero = 1;
     */
    hero?: Hero;
}
// @generated message type with reflection information, may provide speed optimized methods
class SayHelloRequest$Type extends MessageType<SayHelloRequest> {
    constructor() {
        super("hero.SayHelloRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayHelloRequest>): SayHelloRequest {
        const message = { name: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SayHelloRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayHelloRequest): SayHelloRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayHelloRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.SayHelloRequest
 */
export const SayHelloRequest = new SayHelloRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SayHelloResponse$Type extends MessageType<SayHelloResponse> {
    constructor() {
        super("hero.SayHelloResponse", [
            { no: 1, name: "message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SayHelloResponse>): SayHelloResponse {
        const message = { message: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SayHelloResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SayHelloResponse): SayHelloResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string message */ 1:
                    message.message = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SayHelloResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string message = 1; */
        if (message.message !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.message);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.SayHelloResponse
 */
export const SayHelloResponse = new SayHelloResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Hero$Type extends MessageType<Hero> {
    constructor() {
        super("hero.Hero", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "power", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<Hero>): Hero {
        const message = { name: "", hp: 0, power: 0, id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Hero>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Hero): Hero {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 hp */ 2:
                    message.hp = reader.int32();
                    break;
                case /* int32 power */ 3:
                    message.power = reader.int32();
                    break;
                case /* int32 id */ 4:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Hero, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 hp = 2; */
        if (message.hp !== 0)
            writer.tag(2, WireType.Varint).int32(message.hp);
        /* int32 power = 3; */
        if (message.power !== 0)
            writer.tag(3, WireType.Varint).int32(message.power);
        /* int32 id = 4; */
        if (message.id !== 0)
            writer.tag(4, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.Hero
 */
export const Hero = new Hero$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHeroRequest$Type extends MessageType<GetHeroRequest> {
    constructor() {
        super("hero.GetHeroRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetHeroRequest>): GetHeroRequest {
        const message = { name: "", id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHeroRequest): GetHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 id */ 2:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.GetHeroRequest
 */
export const GetHeroRequest = new GetHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHeroResponse$Type extends MessageType<GetHeroResponse> {
    constructor() {
        super("hero.GetHeroResponse", [
            { no: 1, name: "hero", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<GetHeroResponse>): GetHeroResponse {
        const message = { hero: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHeroResponse): GetHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated hero.Hero hero */ 1:
                    message.hero.push(Hero.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated hero.Hero hero = 1; */
        for (let i = 0; i < message.hero.length; i++)
            Hero.internalBinaryWrite(message.hero[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.GetHeroResponse
 */
export const GetHeroResponse = new GetHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHeroRequest$Type extends MessageType<CreateHeroRequest> {
    constructor() {
        super("hero.CreateHeroRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "power", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateHeroRequest>): CreateHeroRequest {
        const message = { name: "", power: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHeroRequest): CreateHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 power */ 2:
                    message.power = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 power = 2; */
        if (message.power !== 0)
            writer.tag(2, WireType.Varint).int32(message.power);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.CreateHeroRequest
 */
export const CreateHeroRequest = new CreateHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateHeroResponse$Type extends MessageType<CreateHeroResponse> {
    constructor() {
        super("hero.CreateHeroResponse", [
            { no: 1, name: "hero", kind: "message", T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<CreateHeroResponse>): CreateHeroResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateHeroResponse): CreateHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hero.Hero hero */ 1:
                    message.hero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hero.Hero hero = 1; */
        if (message.hero)
            Hero.internalBinaryWrite(message.hero, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.CreateHeroResponse
 */
export const CreateHeroResponse = new CreateHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateHeroRequest$Type extends MessageType<UpdateHeroRequest> {
    constructor() {
        super("hero.UpdateHeroRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "hp", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "power", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateHeroRequest>): UpdateHeroRequest {
        const message = { name: "", hp: 0, power: 0, id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateHeroRequest): UpdateHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 hp */ 2:
                    message.hp = reader.int32();
                    break;
                case /* int32 power */ 3:
                    message.power = reader.int32();
                    break;
                case /* int32 id */ 4:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 hp = 2; */
        if (message.hp !== 0)
            writer.tag(2, WireType.Varint).int32(message.hp);
        /* int32 power = 3; */
        if (message.power !== 0)
            writer.tag(3, WireType.Varint).int32(message.power);
        /* int32 id = 4; */
        if (message.id !== 0)
            writer.tag(4, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.UpdateHeroRequest
 */
export const UpdateHeroRequest = new UpdateHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateHeroResponse$Type extends MessageType<UpdateHeroResponse> {
    constructor() {
        super("hero.UpdateHeroResponse", [
            { no: 1, name: "hero", kind: "message", T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<UpdateHeroResponse>): UpdateHeroResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateHeroResponse): UpdateHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hero.Hero hero */ 1:
                    message.hero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hero.Hero hero = 1; */
        if (message.hero)
            Hero.internalBinaryWrite(message.hero, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.UpdateHeroResponse
 */
export const UpdateHeroResponse = new UpdateHeroResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHeroRequest$Type extends MessageType<DeleteHeroRequest> {
    constructor() {
        super("hero.DeleteHeroRequest", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "id", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteHeroRequest>): DeleteHeroRequest {
        const message = { name: "", id: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHeroRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHeroRequest): DeleteHeroRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* int32 id */ 2:
                    message.id = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHeroRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* int32 id = 2; */
        if (message.id !== 0)
            writer.tag(2, WireType.Varint).int32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.DeleteHeroRequest
 */
export const DeleteHeroRequest = new DeleteHeroRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteHeroResponse$Type extends MessageType<DeleteHeroResponse> {
    constructor() {
        super("hero.DeleteHeroResponse", [
            { no: 1, name: "hero", kind: "message", T: () => Hero }
        ]);
    }
    create(value?: PartialMessage<DeleteHeroResponse>): DeleteHeroResponse {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteHeroResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteHeroResponse): DeleteHeroResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* hero.Hero hero */ 1:
                    message.hero = Hero.internalBinaryRead(reader, reader.uint32(), options, message.hero);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteHeroResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* hero.Hero hero = 1; */
        if (message.hero)
            Hero.internalBinaryWrite(message.hero, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message hero.DeleteHeroResponse
 */
export const DeleteHeroResponse = new DeleteHeroResponse$Type();
/**
 * @generated ServiceType for protobuf service hero.HelloService
 */
export const HelloService = new ServiceType("hero.HelloService", [
    { name: "SayHello", options: {}, I: SayHelloRequest, O: SayHelloResponse }
]);
/**
 * @generated ServiceType for protobuf service hero.HeroService
 */
export const HeroService = new ServiceType("hero.HeroService", [
    { name: "GetHero", options: {}, I: GetHeroRequest, O: GetHeroResponse },
    { name: "CreateHero", options: {}, I: CreateHeroRequest, O: CreateHeroResponse },
    { name: "UpdateHero", options: {}, I: UpdateHeroRequest, O: UpdateHeroResponse },
    { name: "DeleteHero", options: {}, I: DeleteHeroRequest, O: DeleteHeroResponse }
]);
