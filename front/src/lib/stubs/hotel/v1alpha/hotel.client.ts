// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/v1alpha/hotel.proto" (package "hotel.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HotelCRUDService } from "./hotel";
import type { ApproveHotelResponse } from "./hotel";
import type { ApproveHotelRequest } from "./hotel";
import type { PendingHotelResponse } from "./hotel";
import type { PendingHotelRequest } from "./hotel";
import type { DeleteResponse } from "./hotel";
import type { DeleteRequest } from "./hotel";
import type { UpdateResponse } from "./hotel";
import type { UpdateRequest } from "./hotel";
import type { AddResponse } from "./hotel";
import type { AddRequest } from "./hotel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetResponse } from "./hotel";
import type { GetRequest } from "./hotel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hotel.v1alpha.HotelCRUDService
 */
export interface IHotelCRUDServiceClient {
    /**
     * @generated from protobuf rpc: Get(hotel.v1alpha.GetRequest) returns (hotel.v1alpha.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     * @generated from protobuf rpc: Add(hotel.v1alpha.AddRequest) returns (hotel.v1alpha.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse>;
    /**
     * @generated from protobuf rpc: Update(hotel.v1alpha.UpdateRequest) returns (hotel.v1alpha.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse>;
    /**
     * @generated from protobuf rpc: Delete(hotel.v1alpha.DeleteRequest) returns (hotel.v1alpha.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse>;
    /**
     * @generated from protobuf rpc: PendingHotel(hotel.v1alpha.PendingHotelRequest) returns (hotel.v1alpha.PendingHotelResponse);
     */
    pendingHotel(input: PendingHotelRequest, options?: RpcOptions): UnaryCall<PendingHotelRequest, PendingHotelResponse>;
    /**
     * @generated from protobuf rpc: ApproveHotel(hotel.v1alpha.ApproveHotelRequest) returns (hotel.v1alpha.ApproveHotelResponse);
     */
    approveHotel(input: ApproveHotelRequest, options?: RpcOptions): UnaryCall<ApproveHotelRequest, ApproveHotelResponse>;
}
/**
 * @generated from protobuf service hotel.v1alpha.HotelCRUDService
 */
export class HotelCRUDServiceClient implements IHotelCRUDServiceClient, ServiceInfo {
    typeName = HotelCRUDService.typeName;
    methods = HotelCRUDService.methods;
    options = HotelCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Get(hotel.v1alpha.GetRequest) returns (hotel.v1alpha.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Add(hotel.v1alpha.AddRequest) returns (hotel.v1alpha.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddRequest, AddResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(hotel.v1alpha.UpdateRequest) returns (hotel.v1alpha.UpdateResponse);
     */
    update(input: UpdateRequest, options?: RpcOptions): UnaryCall<UpdateRequest, UpdateResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateRequest, UpdateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(hotel.v1alpha.DeleteRequest) returns (hotel.v1alpha.DeleteResponse);
     */
    delete(input: DeleteRequest, options?: RpcOptions): UnaryCall<DeleteRequest, DeleteResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<DeleteRequest, DeleteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: PendingHotel(hotel.v1alpha.PendingHotelRequest) returns (hotel.v1alpha.PendingHotelResponse);
     */
    pendingHotel(input: PendingHotelRequest, options?: RpcOptions): UnaryCall<PendingHotelRequest, PendingHotelResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<PendingHotelRequest, PendingHotelResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ApproveHotel(hotel.v1alpha.ApproveHotelRequest) returns (hotel.v1alpha.ApproveHotelResponse);
     */
    approveHotel(input: ApproveHotelRequest, options?: RpcOptions): UnaryCall<ApproveHotelRequest, ApproveHotelResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<ApproveHotelRequest, ApproveHotelResponse>("unary", this._transport, method, opt, input);
    }
}
