// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "hotel/v1alpha/hotel.proto" (package "hotel.v1alpha", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { HotelCRUDService } from "./hotel";
import type { AddResponse } from "./hotel";
import type { AddRequest } from "./hotel";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetResponse } from "./hotel";
import type { GetRequest } from "./hotel";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service hotel.v1alpha.HotelCRUDService
 */
export interface IHotelCRUDServiceClient {
    /**
     * @generated from protobuf rpc: Get(hotel.v1alpha.GetRequest) returns (hotel.v1alpha.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse>;
    /**
     *  rpc Update (UpdateRequest) returns (UpdateResponse);
     *  rpc Delete (DeleteRequest) returns (DeleteResponse);
     *
     * @generated from protobuf rpc: Add(hotel.v1alpha.AddRequest) returns (hotel.v1alpha.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse>;
}
/**
 * @generated from protobuf service hotel.v1alpha.HotelCRUDService
 */
export class HotelCRUDServiceClient implements IHotelCRUDServiceClient, ServiceInfo {
    typeName = HotelCRUDService.typeName;
    methods = HotelCRUDService.methods;
    options = HotelCRUDService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Get(hotel.v1alpha.GetRequest) returns (hotel.v1alpha.GetResponse);
     */
    get(input: GetRequest, options?: RpcOptions): UnaryCall<GetRequest, GetResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetRequest, GetResponse>("unary", this._transport, method, opt, input);
    }
    /**
     *  rpc Update (UpdateRequest) returns (UpdateResponse);
     *  rpc Delete (DeleteRequest) returns (DeleteResponse);
     *
     * @generated from protobuf rpc: Add(hotel.v1alpha.AddRequest) returns (hotel.v1alpha.AddResponse);
     */
    add(input: AddRequest, options?: RpcOptions): UnaryCall<AddRequest, AddResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddRequest, AddResponse>("unary", this._transport, method, opt, input);
    }
}
